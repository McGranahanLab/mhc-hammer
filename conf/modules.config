/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/cohort_tables" },
            mode: params.publish_dir_mode,
            pattern: 'samplesheet.valid.csv',
            saveAs: { filename -> filename.equals('') ? null : filename }
        ]
    }

    withName: CHECK_HLA_TYPE_INPUT {
        publishDir = [
            path: { "${params.outdir}/cohort_tables" },
            enabled: false
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: 'SUBSET_BAMS' {
        ext.args   = { params.fish_reads ? "-k ${params.kmer_file}" : '' } 
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/subset_bams" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.{bam,bai}',
                enabled: params.save_subset_bams
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/subset_bams" },
                mode: "${params.publish_dir_mode}",
                pattern: '*read_counts.csv'
            ]
        ]
    }
    withName: 'FLAGSTAT' {
        publishDir = [
            path: { "${params.outdir}/${meta.patient_id}/flagstat" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.{flagstat,txt}',
            enabled: params.save_flagstat   
        ]
    }

    withName: 'GENERATE_HLA_FQS' {
        publishDir = [
            path: { "${params.outdir}/${meta.patient_id}/fqs" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.{1,2}.fq.gz',
            enabled: params.save_hla_fqs
        ]
    }

    withName: 'HLAHD|HLAHD_LOCAL' {
        ext.args   = { [
            params.hlahd_ignored_read_length ? "-m ${params.hlahd_ignored_read_length}" : '-m 100',
            params.hlahd_trimming_ratio ? "-c ${params.hlahd_trimming_ratio}" : '-c 1.0'
            ].join(' ').trim() }
        publishDir = [
            path: { "${params.outdir}/${meta.patient_id}/hlahd" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*{csv,log,result}",
            enabled: params.save_hlahd_predictions
        ]
    }

    withName: 'GENERATE_REFERENCES' {
        publishDir = [
            [
            path: { "${params.outdir}/${patient_id}/mhc_reference_files" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.endsWith('pos.bed') ? null : filename },
            pattern: "*.{dict,fa,fai,nix,gtf,bed,csv}",
            enabled: params.save_references
            ],
            [
            path: { "${params.outdir}/${patient_id}/mhc_reference_files/snp_positions" },
            mode: "${params.publish_dir_mode}",
            pattern: "*.snp_pos.bed",
            enabled: params.save_references
            ]
        ]
    }

    withName: 'NOVOALIGN' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/dna/novoalign/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*wxs*{bam,bai}',
                enabled: params.save_unfiltered_novoalign_bam
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/rnaseq/novoalign/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*rnaseq*{bam,bai}',
                enabled: params.save_unfiltered_novoalign_bam
            ]
        ]
    }

    withName: 'MAKE_HLA_ALLELE_BAMS' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/dna/novoalign/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*wxs_novoalign*sorted.filtered.*{bam,bai}',
                enabled: params.save_filtered_bams
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/rnaseq/novoalign/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*rnaseq_novoalign*sorted.filtered.*{bam,bai}',
                enabled: params.save_filtered_bams
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/rnaseq/star/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*rnaseq_star*sorted.filtered.*{bam,bai}',
                enabled: params.save_filtered_bams
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/dna/novoalign/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*wxs_novoalign*.csv',
                enabled: params.save_filtered_read_counts
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/rnaseq/star/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*rnaseq_star*.csv',
                enabled: params.save_filtered_read_counts
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/rnaseq/novoalign/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*rnaseq_novoalign*.csv',
                enabled: params.save_filtered_read_counts
            ]
        ]
    }

    withName: 'DETECT_CN_AND_AIB' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_dna_analysis/plots/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*pdf',
                enabled: true
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_dna_analysis/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*dna_analysis.csv',
                enabled: true
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_dna_analysis/coverage_files/" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.coverage.csv',
                enabled: true
            ]
        ]
    }

    withName: 'DETECT_MUTS' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_mutations" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.endsWith('empty.vep.txt') ? null : filename },
                pattern: '*vep.txt',
                enabled: params.save_vep_output
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_mutations" },
                mode: "${params.publish_dir_mode}",
                pattern: '*.vcf',
                enabled: params.save_vcfs
            ]
        ]
    }

    withName: 'PARSE_MUTATIONS' {
        publishDir = [
            path: { "${params.outdir}/${patient_id}/hla_mutations" },
            mode: "${params.publish_dir_mode}",
            pattern: '*mutations.csv',
            enabled: true
        ]
    }

    withName: 'STAR_ALIGN_FIRST_PASS' {
        publishDir = [
            path: { "${params.outdir}/${patient_id}/hla_bams/rna/star" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '',
            enabled: false
        ]
    }

    withName: 'GENERATE_ALL_SPLICE_TABLE' {
        publishDir = [
            path: { "${params.outdir}/cohort_tables/" },
            mode: "${params.publish_dir_mode}",
            saveAs: { filename -> filename.equals('all_splice_sites.tab') ? "cohort_splice_junctions.tab" : null },
            pattern: 'all_splice_sites.tab',
            enabled: params.save_cohort_sj_tab
        ]
    }

    withName: 'ALT_SPLICE_KMER' {
        publishDir = [
            path: { "${params.outdir}/${meta.patient_id}/hla_bams/rna/star" },
            mode: "${params.publish_dir_mode}",
            pattern: '*kmers.txt',
            enabled: params.save_sample_kmer
        ]
    }

    withName: 'STAR_ALIGN_SECOND_PASS' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/rnaseq/star" },
                mode: "${params.publish_dir_mode}",
                pattern: '*sortedSJ.out.tab',
                enabled: params.save_sample_sj_tab
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_bams/rnaseq/star" },
                mode: "${params.publish_dir_mode}",
                pattern: '*subset.sorted.*{bam,bai}',
                enabled: params.save_unfiltered_star_bam
            ] 
        ]
    }

    withName: 'DETECT_ALT_SPLICING' {
        publishDir = [
            path: { "${params.outdir}/${meta.patient_id}/hla_alternative_splicing/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*_splice_junctions.csv',
            enabled: true
        ]
    }

    withName: 'TUMOUR_NORMAL_ALT_SPLICING_ENRICHMENT' {
        publishDir = [
            path: { "${params.outdir}/${meta.patient_id}/hla_alternative_splicing/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.csv',
            enabled: true
        ]
    }

    withName: 'MOSDEPTH' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/mosdepth/" },
                mode: "${params.publish_dir_mode}",
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: '*mosdepth.bed',
                enabled: true
            ]
        ]
    }
    withName: 'DETECT_HLA_REPRESSION' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_rna_analysis/plots" },
                mode: "${params.publish_dir_mode}",
                pattern: "*tumour_normal_comparison.pdf",
                enabled: true
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_rna_analysis/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*_rna_repression.csv",
                enabled: true
            ]
        ]
    }
    withName: 'GET_HLA_ALLELIC_IMBALANCE' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_rna_analysis/plots" },
                mode: "${params.publish_dir_mode}",
                pattern: "*pdf",
                enabled: true
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_rna_analysis/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*rna_aib.csv",
                enabled: true
            ]
        ]
    }
    withName: 'GET_HLA_ALLELE_EXPRESSION' {
        publishDir = [
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_rna_analysis/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*gene_multimapping_reads.csv",
                enabled: true
            ],
            [
                path: { "${params.outdir}/${meta.patient_id}/hla_rna_analysis/" },
                mode: "${params.publish_dir_mode}",
                pattern: "*_rpkm.csv",
                enabled: true
            ]
        ]
    }
    withName: 'CREATE_MOSDEPTH_COHORT_TABLE' {
        publishDir = [
            path: { "${params.outdir}/cohort_tables/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.csv',
            enabled: true
        ]
    }

    withName: 'CREATE_TUMOUR_NORMAL_SPLICING_COHORT_TABLE' {
        publishDir = [
            path: { "${params.outdir}/cohort_tables/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.csv',
            enabled: true
        ]
    }

    withName: 'CREATE_KNOWN_SPLICING_COHORT_TABLE' {
        publishDir = [
            path: { "${params.outdir}/cohort_tables/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.csv',
            enabled: true
        ]
    }

       withName: 'CREATE_NOVEL_SPLICING_COHORT_TABLE' {
        publishDir = [
            path: { "${params.outdir}/cohort_tables/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.csv',
            enabled: true
        ]
    }

    withName: 'CREATE_LIBRARY_SIZE_TABLE' {
        publishDir = [
            path: { "${params.outdir}/cohort_tables/" },
            mode: "${params.publish_dir_mode}",
            pattern: 'cohort_library_size.csv',
            enabled: true
        ]
    }

    withName: 'CREATE_MHC_HAMMER_TABLE' {
        publishDir = [
            path: { "${params.outdir}/cohort_tables/" },
            mode: "${params.publish_dir_mode}",
            pattern: '*.csv',
            enabled: true
        ]
    }
}
