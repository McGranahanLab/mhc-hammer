/*
========================================================================================
    McGranahanLab/MHC_Hammer Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

workDir                    = "${projectDir}/mhc_hammer_temp_dir"

// Global default params, used in configs
params {

    // Input options
    input                      = null

    // Boilerplate options
    outdir                     = "${projectDir}/mhc_hammer_results"
    tracedir                   = "${params.outdir}/pipeline_info"
    monochrome_logs            = false
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = ""
    publish_dir_mode           = 'copy'

    // pipeline params
    run_bam_subsetting         = true
    run_preprocessing_only     = false
    run_hlahd                  = true
    run_rna_analysis           = true
    run_alt_splicing_analysis  = true
    singularityDir             = "${projectDir}/singularity_images/"
    
    // BAM subsetting options
    unmapped_reads             = true
    contig_reads               = true
    contigs_file               = null
    fish_reads                 = true
    mhc_coords                 = "${projectDir}/assets/mhc_coords_chr6.txt"
    kmer_file                  = "${projectDir}/assets/kmer_files/imgt_30mers.fa"
    fish_reads_only            = false
    save_subset_bams           = false

    // Generate FQ job params
    save_hla_fqs               = false

    // HLA-HD parameters
    hlahd_ignored_read_length    = null
    hlahd_trimming_ratio         = null
    save_hlahd_predictions       = true
    hlahd_local_install          = false    
    
    // MHC Hammer reference files
    mhc_gtf                      = "${projectDir}/assets/mhc_references/gtf/mhc.gtf"
    mhc_fasta                    = "${projectDir}/assets/mhc_references/genome/mhc_genome_strand.fasta"
    mhc_transcriptome_fasta      = "${projectDir}/assets/mhc_references/transcriptome/mhc_cds.fasta"
    save_references              = true

    // Library size calculation
    include_unmapped_reads_in_library_size   = false
    save_flagstat                            = true

    // HLA BAM alignment parameters
    max_mismatch                         = 1
    save_unfiltered_novoalign_bam        = false
    save_unfiltered_star_bam             = false
    save_filtered_bams                   = true
    save_filtered_read_counts            = true

    // DNA allelic AIB and copy number parameters
    min_depth                  = 30

    // Mutation calling params
    save_vcfs                  = true
    save_vep_output            = true

    // Alt splicing job params 
    uniq_num_across_junc        = 2
    codon_table                 = "${projectDir}/assets/codon_table.csv"
    save_sample_sj_tab          = true
    save_cohort_sj_tab          = true
    save_novel_splice_junctions = true
    save_sample_kmer            = false
    
    // Parameters for filtering the samples in the output table
    min_frac_mapping_uniquely      = 0.5
    max_frac_mapping_multi_gene    = 0.05
    min_number_of_snps             = 10
    max_copy_number_range          = 2.5
    min_expected_depth             = 10

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null
    
    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '72.h'

}

// Load base.config by default 
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        cacheDir               = "${projectDir}/singularity_images/"
    }
    test      { includeConfig 'conf/test.config'      }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
    HLAHD_PATH       = "${projectDir}/bin/hlahd/"
    HLAHD_BIN_PATH   = "${projectDir}/bin/hlahd/bin/"
    BOWTIE2_PATH     = "${projectDir}/bin/bowtie2/"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
    name            = 'McGranahanLab/mhc_hammer'
    author          = 'Clare Puttic & Tom Jones'
    homePage        = 'https://github.com/McGranahanLab/mhc_hammer'
    description     = 'HLA class I gene dysregulation detection '
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '1.0'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
